# Generated by Django 5.1.4 on 2025-01-04 20:12

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0013_alter_user_email_alter_user_username'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='Логин')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Почта')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True, verbose_name='Телефон')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='photos/', verbose_name='Фотография')),
                ('post', models.CharField(blank=True, max_length=20, null=True, verbose_name='Должность')),
                ('description', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Должность')),
                ('vuz_name', models.CharField(max_length=15, null=True, verbose_name='Название ВУЗа/организации')),
                ('organization_link', models.URLField(blank=True, max_length=500, null=True, verbose_name='Ссылка на ВУЗ/организацию')),
                ('accept_invite', models.BooleanField(default=False, verbose_name='Принимать приглашения в команду')),
                ('verified_user', models.BooleanField(default=False, verbose_name='Верифицированный пользователь')),
                ('rating', models.FloatField(default=0.0, verbose_name='Рейтинг')),
                ('status', models.CharField(choices=[('active', 'Активный'), ('inactive', 'Неактивный')], default='active', max_length=10, verbose_name='Статус')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_field', models.CharField(blank=True, max_length=15, null=True, verbose_name='Дата создания')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Название')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='team_logos/', verbose_name='Логотип')),
                ('organization', models.CharField(blank=True, max_length=255, null=True, verbose_name='ВУЗ/организация')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Подтверждена ВУЗом/организацией')),
                ('rating', models.IntegerField(default=0, verbose_name='Рейтинг')),
                ('status', models.CharField(blank=True, max_length=100, null=True, verbose_name='Статус')),
                ('captain', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='captained_teams', to=settings.AUTH_USER_MODEL, verbose_name='Капитан')),
                ('coach', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='coached_teams', to=settings.AUTH_USER_MODEL, verbose_name='Тренер')),
                ('members', models.ManyToManyField(blank=True, related_name='teams', to=settings.AUTH_USER_MODEL, verbose_name='Члены команды')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_teams', to=settings.AUTH_USER_MODEL, verbose_name='Владелец')),
            ],
            options={
                'verbose_name': 'Команда',
                'verbose_name_plural': 'Команды',
            },
        ),
    ]
